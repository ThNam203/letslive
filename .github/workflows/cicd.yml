name: Build, Push, and Deploy Whole Server

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dockerfile: [
          { path: './backend/auth', name: 'letslive-auth', context: './backend/auth' },
          { path: './backend/user', name: 'letslive-user', context: './backend/user' },
          { path: './backend/transcode', name: 'letslive-transcode', context: './backend/transcode' },
          { path: './backend/livestream', name: 'letslive-livestream', context: './backend/livestream' },
          { path: './backend/configserver', name: 'letslive-configserver', context: './backend/configserver' },
          { path: './backend/chat', name: 'letslive-chat', context: './backend/chat' },
        ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.dockerfile.context }}
          file: ${{ matrix.dockerfile.path }}/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.dockerfile.name }}:latest

  #  deploy-to-ec2:
  #    needs: build-and-push
  #    runs-on: ubuntu-latest
  #    steps:
  #      - name: Checkout code
  #        uses: actions/checkout@v3
  #        
  #      - name: Configure AWS credentials
  #        uses: aws-actions/configure-aws-credentials@v1
  #        with:
  #          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #          aws-region: ${{ secrets.AWS_REGION }}
  #          
  #      - name: Copy docker-compose.yml to EC2
  #        run: |
  #          mkdir -p ~/.ssh
  #          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/ec2_key.pem
  #          chmod 600 ~/.ssh/ec2_key.pem
  #          scp -i ~/.ssh/ec2_key.pem -o StrictHostKeyChecking=no docker-compose.yml ec2-user@${{ secrets.EC2_HOST }}:/home/ec2-user/docker-compose.yml
  #          
  #      - name: Deploy to EC2
  #        run: |
  #          ssh -i ~/.ssh/ec2_key.pem -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} '
  #            # Login to DockerHub
  #            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
  #            
  #            # Pull latest images
  #            docker-compose pull
  #            
  #            # Stop and remove existing containers
  #            docker-compose down
  #            
  #            # Start new containers
  #            docker-compose up -d
  #            
  #            # Cleanup unused images
  #            docker image prune -f
  #          '
