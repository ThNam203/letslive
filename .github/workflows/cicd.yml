name: Build, Push, and Deploy Whole Server

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dockerfile: [
          { path: './backend/auth', name: 'letslive-auth', context: './backend/auth' },
          { path: './backend/user', name: 'letslive-user', context: './backend/user' },
          { path: './backend/transcode', name: 'letslive-transcode', context: './backend/transcode' },
          { path: './backend/livestream', name: 'letslive-livestream', context: './backend/livestream' },
          { path: './backend/configserver', name: 'letslive-configserver', context: './backend/configserver' },
          { path: './backend/chat', name: 'letslive-chat', context: './backend/chat' },
        ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.dockerfile.context }}
          file: ${{ matrix.dockerfile.path }}/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.dockerfile.name }}:latest

  deploy:
    needs: build-and-push
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Update Kong configuration
        run: |
          if [ -f "configs/kong.yml" ]; then
            sed -i 's/secret: "access_token_secret"/secret: "${{ secrets.ACCESS_TOKEN_SECRET }}"/g' configs/kong.yml
            echo "Updated Kong configuration with access token secret"
          else
            echo "Warning: configs/kong.yml not found"
          fi

      - name: Create .env file
        run: |
          cat > .env << EOF
          # Environment and URLs
          CLIENT_URL=${{ secrets.CLIENT_URL }}
          GOOGLE_OAUTH_REDIRECT_URL=${{ secrets.GOOGLE_OAUTH_REDIRECT_URL }}

          # OAuth credentials
          GOOGLE_OAUTH_CLIENT_ID=${{ secrets.GOOGLE_OAUTH_CLIENT_ID }}
          GOOGLE_OAUTH_CLIENT_SECRET=${{ secrets.GOOGLE_OAUTH_CLIENT_SECRET }}

          # Authentication tokens
          ACCESS_TOKEN_SECRET=${{ secrets.ACCESS_TOKEN_SECRET }}
          REFRESH_TOKEN_SECRET=${{ secrets.REFRESH_TOKEN_SECRET }}

          # Email service
          GMAIL_APP_PASSWORD=${{ secrets.GMAIL_APP_PASSWORD }}

          # Service discovery and configuration
          REGISTRY_SERVICE_ADDRESS=${{ secrets.REGISTRY_SERVICE_ADDRESS }}
          CONFIG_SERVER_PROFILE=${{ secrets.CONFIG_SERVER_PROFILE }}

          # Config server
          CONFIGSERVER_GIT_URI=${{ secrets.CONFIGSERVER_GIT_URI }}
          CONFIGSERVER_GIT_USERNAME=${{ secrets.CONFIGSERVER_GIT_USERNAME }}
          CONFIGSERVER_GIT_PASSWORD=${{ secrets.CONFIGSERVER_GIT_PASSWORD }}

          # Database credentials
          CHAT_DB_USER=${{ secrets.CHAT_DB_USER }}
          CHAT_DB_PASSWORD=${{ secrets.CHAT_DB_PASSWORD }}
          LIVESTREAM_DB_USER=${{ secrets.LIVESTREAM_DB_USER }}
          LIVESTREAM_DB_PASSWORD=${{ secrets.LIVESTREAM_DB_PASSWORD }}
          USER_DB_USER=${{ secrets.USER_DB_USER }}
          USER_DB_PASSWORD=${{ secrets.USER_DB_PASSWORD }}
          AUTH_DB_USER=${{ secrets.AUTH_DB_USER }}
          AUTH_DB_PASSWORD=${{ secrets.AUTH_DB_PASSWORD }}

          # MinIO credentials
          MINIO_ROOT_USER=${{ secrets.MINIO_ROOT_USER }}
          MINIO_ROOT_PASSWORD=${{ secrets.MINIO_ROOT_PASSWORD }}
          EOF

      - name: Deploy with Docker Compose
        run: |
          docker compose pull
          docker compose down
          docker compose up -d
          docker image prune -f
