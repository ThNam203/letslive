name: deploy-backend
on:
  workflow_run:
    workflows: [build-and-publish-images]
    types: [completed]
    branches: [main]

jobs:
  deploy-backend-to-selfhost:
    runs-on: self-hosted
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Add access to remove old code # TODO: remove the generated folder dockervolume in transcode service
        run: |
          sudo chmod -R u+w /home/admin/actions-runner/_work/
          sudo chown -R admin:docker /home/admin/actions-runner/_work/

      - name: Update Kong configuration
        run: |
          if [ -f "configs/kong.yml" ]; then
            sed -i 's/secret: "access_token_secret"/secret: "${{ secrets.ACCESS_TOKEN_SECRET }}"/g' configs/kong.yml
            echo "Updated Kong configuration with access token secret"
          else
            echo "Warning: configs/kong.yml not found"
          fi

      - name: Create .env file
        run: |
          cat > .env << EOF
          # Environment and URLs
          CLIENT_URL=${{ secrets.CLIENT_URL }}
          GOOGLE_OAUTH_REDIRECT_URL=${{ secrets.GOOGLE_OAUTH_REDIRECT_URL }}

          # CLOUDFLARE
          CLOUDFLARE_TURNSTILE_SECRET_KEY=${{ secrets.CLOUDFLARE_TURNSTILE_SECRET_KEY }}

          # OAuth credentials
          GOOGLE_OAUTH_CLIENT_ID=${{ secrets.GOOGLE_OAUTH_CLIENT_ID }}
          GOOGLE_OAUTH_CLIENT_SECRET=${{ secrets.GOOGLE_OAUTH_CLIENT_SECRET }}

          # Authentication tokens
          ACCESS_TOKEN_SECRET=${{ secrets.ACCESS_TOKEN_SECRET }}
          REFRESH_TOKEN_SECRET=${{ secrets.REFRESH_TOKEN_SECRET }}

          # Email service
          GMAIL_APP_PASSWORD=${{ secrets.GMAIL_APP_PASSWORD }}

          # Service discovery and configuration
          REGISTRY_SERVICE_ADDRESS=${{ secrets.REGISTRY_SERVICE_ADDRESS }}
          CONFIG_SERVER_PROFILE=${{ secrets.CONFIG_SERVER_PROFILE }}

          # Config server
          CONFIGSERVER_GIT_URI=${{ secrets.CONFIGSERVER_GIT_URI }}
          CONFIGSERVER_GIT_USERNAME=${{ secrets.CONFIGSERVER_GIT_USERNAME }}
          CONFIGSERVER_GIT_PASSWORD=${{ secrets.CONFIGSERVER_GIT_PASSWORD }}

          # Database credentials
          CHAT_DB_USER=${{ secrets.CHAT_DB_USER }}
          CHAT_DB_PASSWORD=${{ secrets.CHAT_DB_PASSWORD }}
          LIVESTREAM_DB_USER=${{ secrets.LIVESTREAM_DB_USER }}
          LIVESTREAM_DB_PASSWORD=${{ secrets.LIVESTREAM_DB_PASSWORD }}
          USER_DB_USER=${{ secrets.USER_DB_USER }}
          USER_DB_PASSWORD=${{ secrets.USER_DB_PASSWORD }}
          AUTH_DB_USER=${{ secrets.AUTH_DB_USER }}
          AUTH_DB_PASSWORD=${{ secrets.AUTH_DB_PASSWORD }}

          # MinIO credentials
          MINIO_ROOT_USER=${{ secrets.MINIO_ROOT_USER }}
          MINIO_ROOT_PASSWORD=${{ secrets.MINIO_ROOT_PASSWORD }}
          EOF

      - name: Deploy with Docker Compose
        run: |
          docker compose pull
          docker compose down
          docker compose up -d
          docker image prune -f
